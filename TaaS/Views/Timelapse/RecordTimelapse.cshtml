@model TimelapseViewModel
<!DOCTYPE html>
<html>
<head>
	<title>Timelapse as a Service</title>
	<style>
		* {
			box-sizing: border-box;
		}

		body {
			background: black;
		}

		body, video, img {
			position: absolute;
			width: 100%;
			height: 100%;
			margin: 0;
			padding: 0;
		}

		canvas {
			display: none;
		}

		#photo {
			opacity: 0.5;
			object-fit: contain;
		}
	</style>
	<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
</head>
<body>
<video id="video"></video>
<canvas id="canvas"></canvas>
@if(Model.LastNumber == -1)
{
	<img id="photo"/>
}
else
{
	<img id="photo" src="/Timelapse/@(Model.Id)/@(Model.LastNumber).png" />
}
	<script>
	(async function() {
		const stream = await navigator.mediaDevices.getUserMedia({ video: {
			facingMode: 'environment'
		} });
		const video = document.getElementById('video');
		video.srcObject = stream;
		video.play();

		const canvas = document.getElementById('canvas');
		const photo = document.getElementById('photo');
		photo.addEventListener('click', () => {
			var context = canvas.getContext('2d');
			canvas.width = video.videoWidth;
			canvas.height = video.videoHeight;
			context.fillStyle = "#000";
			context.fillRect(0, 0, canvas.width, canvas.height);
			context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
			var data = canvas.toDataURL('image/png');
			photo.setAttribute('src', data);
			canvas.toBlob(async blob => {
				try {
					const result = await fetch('/Timelapse/@(Model.Id)/Record', {
						method: 'POST',
						body: blob
					});
					if (!result.ok) {
						const responseText = await result.text();
						alert(`failed : ${result.status} ${responseText}`);
					} else {
						window.location.href = '/Timelapse/@(Model.Id)';
					}
				} catch (e) {
					alert(e);
				}
			});
		});
	})();
</script>
</body>
</html>